// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let gameData = {
    stats: {
        energy: 70,
        focus: 65,
        health: 80
    },
    experience: {
        totalXP: 0,
        level: 1,
        currentLevelXP: 0,
        nextLevelXP: 100,
        categories: {
            medical: { xp: 0, level: 1 },
            science: { xp: 0, level: 1 },
            languages: { xp: 0, level: 1 },
            management: { xp: 0, level: 1 },
            family: { xp: 0, level: 1 },
            self: { xp: 0, level: 1 }
        }
    },
    health: {
        food: false,
        healthyFood: false,
        pleasureFood: false,
        exercise: false,
        sleep: false,
        water: 0
    },
    routine: {
        nesuda1: { text: '–ù–∞–ø–∏—Å–∞—Ç—å —Å–º–µ–Ω—ã —Å–ø–µ—Ü–æ–≤', done: false },
        nesuda2: { text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á–µ—Ç—ã', done: false },
        nesuda3: { text: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏', done: false },
        home: { text: '–†–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ—á—Ç—É', done: false },
        family: { text: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º', done: false }
    },
    quests: [],
    questIdCounter: 1,
    lastResetDate: new Date().toDateString()
};

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–æ–≤
const categories = {
    medical: 'ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è',
    science: 'üî¨ –ù–∞—É–∫–∞',
    languages: 'üåç –Ø–∑—ã–∫–∏',
    management: 'üèõÔ∏è –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
    family: 'üë®‚Äçüë©‚Äçüëß –°–µ–º—å—è',
    self: '‚ú® –Ø —Å–∞–º–∞'
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
window.addEventListener('load', function() {
    loadGameData();
    checkDailyReset();
    updateUI();
    renderQuests();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
    document.querySelectorAll('#food-check, #healthy-food-check, #pleasure-food-check, #exercise-check, #sleep-check').forEach(checkbox => {
        checkbox.addEventListener('change', updateHealthFromUI);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä—É—Ç–∏–Ω—ã
    document.querySelectorAll('#nesuda1-check, #nesuda2-check, #nesuda3-check, #home-check, #family-check').forEach(checkbox => {
        checkbox.addEventListener('change', updateRoutineFromUI);
    });
    
    document.getElementById('water-slider').addEventListener('input', function() {
        gameData.health.water = parseInt(this.value);
        document.getElementById('water-display').textContent = this.value;
        updateMultiplier();
        saveGameData();
    });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –¥–Ω—è
function checkDailyReset() {
    const today = new Date().toDateString();
    if (gameData.lastResetDate !== today) {
        // –°–±—Ä–æ—Å –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ä—É—Ç–∏–Ω—ã
        gameData.health = {
            food: false,
            healthyFood: false,
            pleasureFood: false,
            exercise: false,
            sleep: false,
            water: 0
        };
        
        Object.keys(gameData.routine).forEach(key => {
            gameData.routine[key].done = false;
        });
        
        gameData.lastResetDate = today;
        saveGameData();
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function saveGameData() {
    try {
        localStorage.setItem('rpgQuestData', JSON.stringify(gameData));
    } catch (e) {
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }
}

function loadGameData() {
    try {
        const saved = localStorage.getItem('rpgQuestData');
        if (saved) {
            gameData = { ...gameData, ...JSON.parse(saved) };
        }
    } catch (e) {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
}

// –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞
function calculateQuestXP(level, progress = 100) {
    const baseXP = {
        'E': 25,    // –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏, 1-2 –¥–Ω—è
        'D': 75,    // –ù–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã, –Ω–µ–¥–µ–ª—è  
        'C': 200,   // –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–ª–∏, –º–µ—Å—è—Ü
        'B': 500,   // –í–∞–∂–Ω—ã–µ –º–∏—Å—Å–∏–∏, 2-3 –º–µ—Å—è—Ü–∞
        'A': 1000,  // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø–æ–ª–≥–æ–¥–∞
        'S': 2500   // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –≥–æ–¥+
    };
    
    return Math.round((baseXP[level] || 75) * (progress / 100));
}

function addExperience(category, xp) {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    gameData.experience.categories[category].xp += xp;
    gameData.experience.totalXP += xp;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryData = gameData.experience.categories[category];
    const newCategoryLevel = Math.floor(categoryData.xp / 50) + 1; // –ö–∞–∂–¥—ã–µ 50 XP = +1 —É—Ä–æ–≤–µ–Ω—å
    if (newCategoryLevel > categoryData.level) {
        categoryData.level = newCategoryLevel;
        showLevelUpNotification(`${categories[category]} –¥–æ—Å—Ç–∏–≥ ${newCategoryLevel} —É—Ä–æ–≤–Ω—è!`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    const newMainLevel = Math.floor(gameData.experience.totalXP / 100) + 1; // –ö–∞–∂–¥—ã–µ 100 XP = +1 –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    if (newMainLevel > gameData.experience.level) {
        gameData.experience.level = newMainLevel;
        showLevelUpNotification(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${newMainLevel} —É—Ä–æ–≤–Ω—è!`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    gameData.experience.currentLevelXP = gameData.experience.totalXP % 100;
    gameData.experience.nextLevelXP = 100;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    if (newMainLevel > gameData.experience.level) {
    gameData.experience.level = newMainLevel;
    showLevelUpNotification(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${newMainLevel} —É—Ä–æ–≤–Ω—è!`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    checkLevelRewards(newMainLevel);
}
    
    updateExperienceDisplay();
    saveGameData();
}

function showLevelUpNotification(message) {
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: linear-gradient(135deg, #d4af37, #ffd700);
        color: #1a0f0a;
        padding: 20px 30px;
        border-radius: 15px;
        font-family: 'Cinzel', serif;
        font-weight: bold;
        font-size: 1.2em;
        z-index: 2000;
        box-shadow: 0 10px 30px rgba(0,0,0,0.5);
        border: 2px solid #b8941f;
        animation: levelUp 3s ease-in-out forwards;
    `;
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    const style = document.createElement('style');
    style.textContent = `
        @keyframes levelUp {
            0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
            20% { opacity: 1; transform: translate(-50%, -50%) scale(1.1); }
            80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
            100% { opacity: 0; transform: translate(-50%, -50%) scale(0.9); }
        }
    `;
    document.head.appendChild(style);
    
    setTimeout(() => {
        document.body.removeChild(notification);
        document.head.removeChild(style);
    }, 3000);
}

function updateExperienceDisplay() {
    document.getElementById('main-level').textContent = gameData.experience.level;
    document.getElementById('total-xp').textContent = `${gameData.experience.totalXP} XP`;
    
    const progressPercent = (gameData.experience.currentLevelXP / gameData.experience.nextLevelXP) * 100;
    document.getElementById('xp-bar-fill').style.width = progressPercent + '%';
    document.getElementById('xp-bar-text').textContent = 
        `${gameData.experience.currentLevelXP} / ${gameData.experience.nextLevelXP} XP`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    Object.keys(gameData.experience.categories).forEach(category => {
        const level = gameData.experience.categories[category].level;
        document.getElementById(`${category}-level`).textContent = level;
    });
}

function updateUI() {
    updateStats();
    updateHealth();
    updateRoutine();
    updateMultiplier();
    updateExperienceDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
function updateStats() {
    document.getElementById('energy-fill').style.width = gameData.stats.energy + '%';
    document.getElementById('energy-value').textContent = gameData.stats.energy;
    document.getElementById('focus-fill').style.width = gameData.stats.focus + '%';
    document.getElementById('focus-value').textContent = gameData.stats.focus;
    document.getElementById('health-fill').style.width = gameData.stats.health + '%';
    document.getElementById('health-value').textContent = gameData.stats.health;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
function updateHealth() {
    document.getElementById('food-check').checked = gameData.health.food;
    document.getElementById('healthy-food-check').checked = gameData.health.healthyFood;
    document.getElementById('pleasure-food-check').checked = gameData.health.pleasureFood;
    document.getElementById('exercise-check').checked = gameData.health.exercise;
    document.getElementById('sleep-check').checked = gameData.health.sleep;
    document.getElementById('water-slider').value = gameData.health.water;
    document.getElementById('water-display').textContent = gameData.health.water;
}

function updateHealthFromUI() {
    const oldHealth = { ...gameData.health }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    gameData.health.food = document.getElementById('food-check').checked;
    gameData.health.healthyFood = document.getElementById('healthy-food-check').checked;
    gameData.health.pleasureFood = document.getElementById('pleasure-food-check').checked;
    gameData.health.exercise = document.getElementById('exercise-check').checked;
    gameData.health.sleep = document.getElementById('sleep-check').checked;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø—É–Ω–∫—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    const healthTasks = ['food', 'healthyFood', 'pleasureFood', 'exercise', 'sleep'];
    const healthNames = {
        food: 'üçΩÔ∏è –ï–¥–∞',
        healthyFood: 'ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', 
        pleasureFood: 'üç∞ –ü–∏—Ç–∞–Ω–∏–µ –≤ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ',
        exercise: 'üèÉ‚Äç‚ôÄÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        sleep: 'üò¥ –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ–Ω'
    };
    
    healthTasks.forEach(task => {
        if (!oldHealth[task] && gameData.health[task]) {
            // –¢–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –¥–∞–µ–º XP
            addExperience('self', 1);
            showMiniNotification(`+1 XP –∑–∞ "${healthNames[task]}"`);
        }
    });
    
    updateStats();
    updateMultiplier();
    saveGameData();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É—Ç–∏–Ω—ã
function updateRoutine() {
    Object.keys(gameData.routine).forEach(key => {
        const checkbox = document.getElementById(`${key}-check`);
        const text = document.getElementById(`${key}-text`);
        if (checkbox && text) {
            checkbox.checked = gameData.routine[key].done;
            text.textContent = gameData.routine[key].text;
        }
    });
}

function updateRoutineFromUI() {
    const oldRoutine = {};
    Object.keys(gameData.routine).forEach(key => {
        oldRoutine[key] = gameData.routine[key].done;
    });
    
    Object.keys(gameData.routine).forEach(key => {
        const checkbox = document.getElementById(`${key}-check`);
        if (checkbox) {
            const wasCompleted = oldRoutine[key];
            const isCompleted = checkbox.checked;
            
            // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –¥–∞–µ–º XP
            if (!wasCompleted && isCompleted) {
                giveRoutineXP(key);
            }
            
            gameData.routine[key].done = isCompleted;
        }
    });
    
    updateMultiplier();
    saveGameData();
}

function editRoutineTask(taskKey) {
    const currentText = gameData.routine[taskKey].text;
    const newText = prompt('–ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–¥–∞—á—É:', currentText);
    
    if (newText && newText.trim() !== '') {
        gameData.routine[taskKey].text = newText.trim();
        updateRoutine();
        saveGameData();
    }
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è
function updateMultiplier() {
    const health = gameData.health;
    let baseStats = 20; // –ë–∞–∑–æ–≤—ã–µ 20%
    
    // –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –¥–∞–µ—Ç +12%
    if (health.food) baseStats += 12;
    if (health.healthyFood) baseStats += 12;
    if (health.pleasureFood) baseStats += 12;
    if (health.exercise) baseStats += 12;
    if (health.sleep) baseStats += 12;
    if (health.water >= 1500) baseStats += 12; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    gameData.stats.health = Math.min(100, baseStats);
    gameData.stats.energy = Math.min(100, baseStats - 5);
    gameData.stats.focus = Math.min(100, baseStats - 10);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ XP
    let healthMultiplier = 1.0;
    let routineMultiplier = 1.0;
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–∑–¥–æ—Ä–æ–≤—å—è)
    if (gameData.stats.energy >= 80) healthMultiplier += 0.5;  // +50%
    else if (gameData.stats.energy >= 60) healthMultiplier += 0.3;  // +30%
    else if (gameData.stats.energy >= 40) healthMultiplier += 0.1;  // +10%
    
    if (gameData.stats.focus >= 70) healthMultiplier += 0.3;   // +30%
    else if (gameData.stats.focus >= 50) healthMultiplier += 0.2;   // +20%
    
    if (gameData.stats.health >= 90) healthMultiplier += 0.2;  // +20%
    else if (gameData.stats.health >= 70) healthMultiplier += 0.1;  // +10%
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç —Ä—É—Ç–∏–Ω—ã
    const routineCompletion = calculateRoutineCompletion();
    if (routineCompletion >= 80) routineMultiplier = 1.3;      // +30%
    else if (routineCompletion >= 60) routineMultiplier = 1.2; // +20%
    else if (routineCompletion >= 40) routineMultiplier = 1.1; // +10%
    else if (routineCompletion >= 20) routineMultiplier = 1.05; // +5%
    
    // –û–±—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    const totalMultiplier = healthMultiplier * routineMultiplier;
    
    document.getElementById('multiplier-display').innerHTML = `
        <div>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞: √ó${totalMultiplier.toFixed(1)}</div>
        <div style="font-size: 0.8em; margin-top: 5px;">
            üí™ –ó–¥–æ—Ä–æ–≤—å–µ: √ó${healthMultiplier.toFixed(1)} | üìã –†—É—Ç–∏–Ω–∞: √ó${routineMultiplier.toFixed(1)}
        </div>
    `;
    
    updateStats();
}

function calculateRoutineCompletion() {
    const routine = gameData.routine;
    let completed = 0;
    let total = Object.keys(routine).length;
    
    Object.values(routine).forEach(task => {
        if (task.done) completed++;
    });
    
    return (completed / total) * 100;
}

// –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–´–• –ö–í–ï–°–¢–û–í

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –æ–ø—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function toggleProgressOptions() {
    const progressType = document.getElementById('progress-type').value;
    const stepsOptions = document.getElementById('steps-options');
    const stagesOptions = document.getElementById('stages-options');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏
    stepsOptions.style.display = 'none';
    stagesOptions.style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ
    if (progressType === 'steps') {
        stepsOptions.style.display = 'block';
    } else if (progressType === 'stages') {
        stagesOptions.style.display = 'block';
    }
}

// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø
function addStage() {
    const stagesList = document.getElementById('stages-list');
    const newStage = document.createElement('div');
    newStage.className = 'stage-item';
    newStage.style.cssText = 'display: flex; gap: 10px; margin-bottom: 10px; align-items: center;';
    
    newStage.innerHTML = `
        <input type="text" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞..." style="flex: 1; padding: 8px; border: 1px solid #d4af37; border-radius: 5px; background: rgba(0,0,0,0.3); color: #d4af37;">
        <input type="number" placeholder="%" min="1" max="100" style="width: 60px; padding: 8px; border: 1px solid #d4af37; border-radius: 5px; background: rgba(0,0,0,0.3); color: #d4af37;">
        <button type="button" onclick="removeStage(this)" style="background: #c44; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer;">√ó</button>
    `;
    
    stagesList.appendChild(newStage);
}

// –£–¥–∞–ª–∏—Ç—å —ç—Ç–∞–ø
function removeStage(button) {
    button.parentElement.remove();
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    if (!dateString) return '';
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) {
        return `‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ ${Math.abs(diffDays)} –¥–Ω.`;
    } else if (diffDays === 0) {
        return 'üî• –°–µ–≥–æ–¥–Ω—è!';
    } else if (diffDays === 1) {
        return '‚è∞ –ó–∞–≤—Ç—Ä–∞';
    } else if (diffDays <= 7) {
        return `üìÖ –ß–µ—Ä–µ–∑ ${diffDays} –¥–Ω.`;
    } else {
        return `üìÖ ${date.toLocaleDateString('ru-RU')}`;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
function isOverdue(dateString) {
    if (!dateString) return false;
    const date = new Date(dateString);
    const now = new Date();
    return date.getTime() < now.getTime();
}

// –î–æ–±–∞–≤–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if (gameData.quests.length === 0) {
    gameData.quests = [
        {
            id: 1,
            title: '–ò–∑—É—á–µ–Ω–∏–µ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            category: 'languages',
            level: 'C',
            description: '–î–æ—Å—Ç–∏—á—å —É—Ä–æ–≤–Ω—è B1 –≤ –∏—Å–ø–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ —á–µ—Ä–µ–∑ Duolingo',
            progress: 30,
            progressType: 'steps',
            stepsFrom: 10,
            stepsTo: 60,
            stepsUnit: '—É—Ä–æ–≤–µ–Ω—å',
            stepsCurrent: 25,
            deadline: '2026-06-01',
            stages: [],
            createdAt: new Date().toISOString()
        },
        {
            id: 2,
            title: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—ã–ª—å—Ü–µ–≤–æ–π –ª–æ–≤—É—à–∫–∏',
            category: 'science',
            level: 'B',
            description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—ã–ª—å—Ü–µ',
            progress: 15,
            progressType: 'stages',
            stages: [
                { name: '–ö—É–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', percent: 30, done: false },
                { name: '–°–æ–±—Ä–∞—Ç—å –ª–æ–≤—É—à–∫—É', percent: 50, done: false },
                { name: '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', percent: 20, done: false }
            ],
            deadline: '2025-09-01',
            createdAt: new Date().toISOString()
        },
        {
            id: 3,
            title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ IELTS',
            category: 'languages',
            level: 'A',
            description: '–ü–æ–¥–Ω—è—Ç—å –±–∞–ª–ª —Å 5.0 –¥–æ 7.0 –¥–ª—è —Å–º–µ–Ω—ã –∂–∏–∑–Ω–∏',
            progress: 0,
            progressType: 'steps',
            stepsFrom: 5.0,
            stepsTo: 7.0,
            stepsUnit: '–±–∞–ª–ª',
            stepsCurrent: 5.0,
            deadline: '2025-11-01',
            stages: [],
            createdAt: new Date().toISOString()
        }
    ];
    gameData.questIdCounter = 4;
}
// –†–∞–±–æ—Ç–∞ —Å –∫–≤–µ—Å—Ç–∞–º–∏
function renderQuests() {
    const grid = document.getElementById('quest-grid');
    grid.innerHTML = '';
    
    gameData.quests.forEach(quest => {
        const card = createQuestCard(quest);
        grid.appendChild(card);
    });
    
    if (gameData.quests.length === 0) {
        grid.innerHTML = '<p style="text-align: center; color: #cdaa3d; grid-column: 1/-1;">–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!</p>';
    }
}

function createQuestCard(quest) {
    const card = document.createElement('div');
    card.className = 'quest-card';
    card.dataset.category = quest.category;
    
    const progressPercent = Math.round(quest.progress);
    const categoryName = categories[quest.category] || quest.category;
    
    // –î–µ–¥–ª–∞–π–Ω
    let deadlineHtml = '';
    if (quest.deadline) {
        const deadlineText = formatDate(quest.deadline);
        const overdue = isOverdue(quest.deadline);
        deadlineHtml = `<div class="quest-deadline ${overdue ? 'overdue' : ''}">${deadlineText}</div>`;
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–ª–∏ —ç—Ç–∞–ø—ã
    let progressHtml = '';
    if (quest.progressType === 'stages' && quest.stages && quest.stages.length > 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ø—ã
        const stagesHtml = quest.stages.map((stage, index) => `
            <div class="stage-item ${stage.done ? 'completed' : ''}">
                <span class="stage-name">${stage.name}</span>
                <span class="stage-percent">${stage.percent}%</span>
                <input type="checkbox" class="stage-checkbox" 
                       ${stage.done ? 'checked' : ''} 
                       onchange="toggleStage(${quest.id}, ${index})">
            </div>
        `).join('');
        
        progressHtml = `
            <div class="quest-stages">
                ${stagesHtml}
            </div>
        `;
    } else if (quest.progressType === 'steps') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —à–∞–≥–∞–º
        const current = quest.stepsCurrent || quest.stepsFrom;
        const total = quest.stepsTo;
        const unit = quest.stepsUnit || '';
        
        progressHtml = `
            <div class="quest-progress">
                <div style="margin-bottom: 8px; font-size: 0.9em; color: #cdaa3d;">
                    ${current} / ${total} ${unit}
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${progressPercent}%"></div>
                    <div class="progress-text">${progressPercent}%</div>
                </div>
            </div>
        `;
    } else {
        // –û–±—ã—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        progressHtml = `
            <div class="quest-progress">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${progressPercent}%"></div>
                    <div class="progress-text">${progressPercent}%</div>
                </div>
            </div>
        `;
    }
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    let controlsHtml = '';
    if (quest.progressType === 'stages') {
        controlsHtml = `
            <div class="quest-controls">
                <button class="btn btn-small" onclick="completeQuest(${quest.id})">‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
                <button class="btn btn-small" onclick="deleteQuest(${quest.id})" style="background: #c44;">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
    } else if (quest.progressType === 'steps') {
        controlsHtml = `
            <div class="quest-controls">
                <button class="btn btn-small" onclick="updateStepsProgress(${quest.id}, 1)">+1 ${quest.stepsUnit || '—à–∞–≥'}</button>
                <button class="btn btn-small" onclick="updateStepsProgress(${quest.id}, 5)">+5</button>
                <button class="btn btn-small" onclick="completeQuest(${quest.id})">‚úÖ</button>
                <button class="btn btn-small" onclick="deleteQuest(${quest.id})" style="background: #c44;">üóëÔ∏è</button>
            </div>
        `;
    } else {
        controlsHtml = `
            <div class="quest-controls">
                <button class="btn btn-small" onclick="updateQuestProgress(${quest.id}, 10)">+10%</button>
                <button class="btn btn-small" onclick="updateQuestProgress(${quest.id}, 25)">+25%</button>
                <button class="btn btn-small" onclick="completeQuest(${quest.id})">‚úÖ</button>
                <button class="btn btn-small" onclick="deleteQuest(${quest.id})" style="background: #c44;">üóëÔ∏è</button>
            </div>
        `;
    }
    
    card.innerHTML = `
        <div class="quest-level level-${quest.level}">${quest.level}</div>
        <div class="quest-title">${quest.title}</div>
        <div class="quest-category">${categoryName}</div>
        ${deadlineHtml}
        ${quest.description ? `<p style="color: #cdaa3d; font-size: 0.9em; margin-bottom: 15px;">${quest.description}</p>` : ''}
        ${progressHtml}
        ${controlsHtml}
    `;
    
    return card;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
function toggleStage(questId, stageIndex) {
    const quest = gameData.quests.find(q => q.id === questId);
    if (quest && quest.stages && quest.stages[stageIndex]) {
        quest.stages[stageIndex].done = !quest.stages[stageIndex].done;
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        let totalProgress = 0;
        quest.stages.forEach(stage => {
            if (stage.done) {
                totalProgress += stage.percent;
            }
        });
        quest.progress = totalProgress;
        
        // –ï—Å–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–µ—Å—Ç
        if (quest.progress >= 100) {
            completeQuest(questId);
        } else {
            renderQuests();
            saveGameData();
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —à–∞–≥–∞–º
function updateStepsProgress(questId, increment) {
    const quest = gameData.quests.find(q => q.id === questId);
    if (quest) {
        const current = quest.stepsCurrent || quest.stepsFrom;
        const newCurrent = Math.min(quest.stepsTo, current + increment);
        quest.stepsCurrent = newCurrent;
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        const totalSteps = quest.stepsTo - quest.stepsFrom;
        const completedSteps = newCurrent - quest.stepsFrom;
        quest.progress = Math.round((completedSteps / totalSteps) * 100);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        const routineCompletion = calculateRoutineCompletion();
        if (routineCompletion >= 50) {
            // –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å XP –∑–∞ –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä—É—Ç–∏–Ω–µ
            const stepXP = Math.round(calculateQuestXP(quest.level, 2)); // 2% –æ—Ç –∫–≤–µ—Å—Ç–∞ –∑–∞ —à–∞–≥
            addExperience(quest.category, stepXP);
        }
        
        if (quest.progress >= 100) {
            completeQuest(questId);
        } else {
            renderQuests();
            saveGameData();
        }
    }
}

function updateQuestProgress(questId, increment) {
    const quest = gameData.quests.find(q => q.id === questId);
    if (quest) {
        const routineCompletion = calculateRoutineCompletion();
        let actualIncrement = increment;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏
        if (routineCompletion >= 50) {
            actualIncrement *= 1.3; // +30% –∑–∞ —Ä—É—Ç–∏–Ω—É
        }
        
        quest.progress = Math.min(100, quest.progress + actualIncrement);
        
        if (quest.progress >= 100) {
            completeQuest(questId);
        } else {
            renderQuests();
            saveGameData();
        }
    }
}

function completeQuest(questId) {
    const questIndex = gameData.quests.findIndex(q => q.id === questId);
    if (questIndex !== -1) {
        const quest = gameData.quests[questIndex];
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç
        let baseXP = calculateQuestXP(quest.level, 100);
        const routineCompletion = calculateRoutineCompletion();
        
        if (routineCompletion >= 50) {
            baseXP = Math.round(baseXP * 1.3); // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
        }
        
        // –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É
        if (quest.deadline && isOverdue(quest.deadline)) {
            baseXP = Math.round(baseXP * 0.8); // -20% –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É
        }
        
        addExperience(quest.category, baseXP);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        const penalty = quest.deadline && isOverdue(quest.deadline) ? ' (-20% –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É)' : '';
        alert(`üéâ –ö–≤–µ—Å—Ç "${quest.title}" –∑–∞–≤–µ—Ä—à–µ–Ω!\n+${baseXP} XP –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categories[quest.category]}"${penalty}`);
        
        gameData.quests.splice(questIndex, 1);
        renderQuests();
        saveGameData();
    }
}

function deleteQuest(questId) {
    if (confirm('‚ùå –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç?\n\n–í—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å!')) {
        const questIndex = gameData.quests.findIndex(q => q.id === questId);
        if (questIndex !== -1) {
            gameData.quests.splice(questIndex, 1);
            renderQuests();
            saveGameData();
        }
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–æ–≤
function filterQuests(category) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    document.querySelectorAll('.quest-card').forEach(card => {
        if (category === 'all' || card.dataset.category === category) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showAddQuestModal() {
    document.getElementById('addQuestModal').style.display = 'block';
}

function closeAddQuestModal() {
    document.getElementById('addQuestModal').style.display = 'none';
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('quest-title').value = '';
    document.getElementById('quest-description').value = '';
    document.getElementById('progress-type').value = 'simple';
    document.getElementById('steps-from').value = '';
    document.getElementById('steps-to').value = '';
    document.getElementById('steps-unit').value = '';
    document.getElementById('quest-deadline').value = '';
    document.getElementById('initial-progress').value = '0';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏
    document.getElementById('steps-options').style.display = 'none';
    document.getElementById('stages-options').style.display = 'none';
    
    // –û—á–∏—â–∞–µ–º —ç—Ç–∞–ø—ã
    const stagesList = document.getElementById('stages-list');
    stagesList.innerHTML = `
        <div class="stage-item" style="display: flex; gap: 10px; margin-bottom: 10px; align-items: center;">
            <input type="text" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞..." style="flex: 1; padding: 8px; border: 1px solid #d4af37; border-radius: 5px; background: rgba(0,0,0,0.3); color: #d4af37;">
            <input type="number" placeholder="%" min="1" max="100" style="width: 60px; padding: 8px; border: 1px solid #d4af37; border-radius: 5px; background: rgba(0,0,0,0.3); color: #d4af37;">
            <button type="button" onclick="removeStage(this)" style="background: #c44; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer;">√ó</button>
        </div>
    `;
}

function addQuest() {
    const title = document.getElementById('quest-title').value.trim();
    const category = document.getElementById('quest-category').value;
    const level = document.getElementById('quest-level').value;
    const description = document.getElementById('quest-description').value.trim();
    const progressType = document.getElementById('progress-type').value;
    const deadline = document.getElementById('quest-deadline').value;
    const initialProgress = parseInt(document.getElementById('initial-progress').value) || 0;
    
    if (!title) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞!');
        return;
    }
    
    const newQuest = {
        id: gameData.questIdCounter++,
        title: title,
        category: category,
        level: level,
        description: description,
        progress: initialProgress,
        progressType: progressType,
        deadline: deadline || null,
        stages: [],
        createdAt: new Date().toISOString()
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (progressType === 'steps') {
        const stepsFrom = parseInt(document.getElementById('steps-from').value) || 0;
        const stepsTo = parseInt(document.getElementById('steps-to').value) || 100;
        const stepsUnit = document.getElementById('steps-unit').value.trim() || '—à–∞–≥';
        
        newQuest.stepsFrom = stepsFrom;
        newQuest.stepsTo = stepsTo;
        newQuest.stepsUnit = stepsUnit;
        newQuest.stepsCurrent = stepsFrom + Math.round((stepsTo - stepsFrom) * initialProgress / 100);
    } else if (progressType === 'stages') {
        const stageInputs = document.querySelectorAll('#stages-list .stage-item');
        const stages = [];
        
        stageInputs.forEach(stageItem => {
            const nameInput = stageItem.querySelector('input[type="text"]');
            const percentInput = stageItem.querySelector('input[type="number"]');
            
            if (nameInput.value.trim() && percentInput.value) {
                stages.push({
                    name: nameInput.value.trim(),
                    percent: parseInt(percentInput.value),
                    done: false
                });
            }
        });
        
        newQuest.stages = stages;
        newQuest.progress = 0; // –î–ª—è —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    }
    
    gameData.quests.push(newQuest);
    renderQuests();
    saveGameData();
    closeAddQuestModal();
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–≤–µ—Å—Ç–æ–≤
function generateQuest() {
    const situation = document.getElementById('situation-input').value.trim();
    
    if (!situation) {
        alert('–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞!');
        return;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    let questData = analyze—Å–∏—Çuation(situation);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('quest-title').value = questData.title;
    document.getElementById('quest-category').value = questData.category;
    document.getElementById('quest-level').value = questData.level;
    document.getElementById('quest-description').value = questData.description;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    showAddQuestModal();
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    document.getElementById('situation-input').value = '';
}

function analyze—Å–∏—Çuation(text) {
    text = text.toLowerCase();
    
    let category = 'self';
    let level = 'C';
    let title = '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ';
    let description = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–≤–µ—Å—Ç';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (text.includes('–¥—Ü–ø') || text.includes('—ç—Ä–≥–æ—Ç–µ—Ä–∞–ø–∏') || text.includes('–ø–∞—Ü–∏–µ–Ω—Ç') || text.includes('–¥–∏–∞–≥–Ω–æ—Å—Ç') || text.includes('–ª–µ—á–µ–Ω') || text.includes('–º–µ–¥–∏—Ü')) {
        category = 'medical';
    } else if (text.includes('–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω') || text.includes('–ø—ã–ª—å—Ü') || text.includes('–ª–æ–≤—É—à–∫') || text.includes('–∞–Ω–∞–ª–∏–∑') || text.includes('–Ω–∞—É–∫')) {
        category = 'science';
    } else if (text.includes('–∏—Å–ø–∞–Ω—Å–∫') || text.includes('–∞–Ω–≥–ª–∏–π—Å–∫') || text.includes('—è–∑—ã–∫') || text.includes('ielts') || text.includes('duolingo')) {
        category = 'languages';
    } else if (text.includes('–∫–ª–∏–Ω–∏–∫') || text.includes('—É–ø—Ä–∞–≤–ª–µ–Ω') || text.includes('–∫–æ–º–∞–Ω–¥') || text.includes('–ø—Ä–æ—Ü–µ—Å—Å') || text.includes('–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü')) {
        category = 'management';
    } else if (text.includes('—Å–µ–º—å') || text.includes('–¥–æ–º') || text.includes('—Ä–µ–±–µ–Ω') || text.includes('—Ä–æ–¥–∏—Ç–µ–ª')) {
        category = 'family';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (text.includes('–Ω–∞—á–∞–ª') || text.includes('–ø–æ–ø—Ä–æ–±–æ–≤–∞') || text.includes('–∏–∑—É—á–∞')) {
        level = 'D';
        if (text.includes('—ç—Ä–≥–æ—Ç–µ—Ä–∞–ø–∏')) {
            title = '–û—Å–≤–æ–µ–Ω–∏–µ –æ—Å–Ω–æ–≤ —ç—Ä–≥–æ—Ç–µ—Ä–∞–ø–∏–∏';
            description = '–ò–∑—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —ç—Ä–≥–æ—Ç–µ—Ä–∞–ø–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç—å–º–∏ —Å –î–¶–ü';
        } else if (text.includes('–∏—Å–ø–∞–Ω—Å–∫')) {
            title = '–ò–∑—É—á–µ–Ω–∏–µ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞';
            description = '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –∏—Å–ø–∞–Ω—Å–∫–∏–º —è–∑—ã–∫–æ–º';
        }
    } else if (text.includes('–ø—Ä–æ–≤–µ—Å—Ç') || text.includes('—Å–¥–µ–ª–∞—Ç') || text.includes('—Ä–µ–∞–ª–∏–∑–æ–≤–∞')) {
        level = 'C';
        if (text.includes('–ª–æ–≤—É—à–∫')) {
            title = '–°–æ–∑–¥–∞–Ω–∏–µ –ø—ã–ª—å—Ü–µ–≤–æ–π –ª–æ–≤—É—à–∫–∏';
            description = '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—ã–ª—å—Ü–µ–≤—É—é –ª–æ–≤—É—à–∫—É –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π';
        }
    } else if (text.includes('–≤–Ω–µ–¥—Ä–∏—Ç') || text.includes('—Å–∏—Å—Ç–µ–º–Ω–æ') || text.includes('–∫–æ–º–ø–ª–µ–∫—Å–Ω–æ')) {
        level = 'B';
    } else if (text.includes('—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω') || text.includes('–∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ') || text.includes('–ø–æ–ª–Ω–æ—Å—Ç')) {
        level = 'A';
    }
    
    // –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if (title === '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ') {
        const words = text.split(' ').slice(0, 4).join(' ');
        title = words.charAt(0).toUpperCase() + words.slice(1);
        description = `–ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ: "${text.slice(0, 100)}..."`;
    }
    
    return { title, category, level, description };
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
window.onclick = function(event) {
    const modal = document.getElementById('addQuestModal');
    if (event.target === modal) {
        closeAddQuestModal();
    }
}
// –î–∞—Ç—å XP –∑–∞ —Ä—É—Ç–∏–Ω—É
function giveRoutineXP(taskKey) {
    let baseXP = 2;
    let category = 'self';
    
    if (taskKey.includes('nesuda')) {
        category = 'management';
        baseXP = 3;
    } else if (taskKey === 'family') {
        category = 'family';
    }
    
    let healthMultiplier = 1.0;
    if (gameData.stats.energy >= 80) healthMultiplier += 0.5;
    else if (gameData.stats.energy >= 60) healthMultiplier += 0.3;
    
    const finalXP = Math.round(baseXP * healthMultiplier);
    addExperience(category, finalXP);
    showMiniNotification(`+${finalXP} XP –∑–∞ "${gameData.routine[taskKey].text}"`);
}

// –ú–∏–Ω–∏-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showMiniNotification(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed; top: 20px; right: 20px;
        background: rgba(212, 175, 55, 0.9); color: #1a0f0a;
        padding: 10px 15px; border-radius: 8px;
        font-size: 0.9em; font-weight: bold; z-index: 1500;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        document.body.removeChild(notification);
    }, 2000);
}
// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —É—Ä–æ–≤–Ω–∏
const rewards = {
    2: { type: 'title', name: '–£—á–µ–Ω–∏–∫ –¶–µ–ª–∏—Ç–µ–ª—è', description: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É' },
    3: { type: 'equipment', name: '–ú–∞–Ω—Ç–∏—è –ú—É–¥—Ä–æ—Å—Ç–∏', description: '+10% XP –∫–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º', bonus: 0.1 },
    5: { type: 'title', name: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –ó–Ω–∞–Ω–∏–π', description: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å –º—É–¥—Ä–æ—Å—Ç–∏ –≤–µ–∫–æ–≤' },
    7: { type: 'equipment', name: '–ö–æ–ª—å—Ü–æ –§–æ–∫—É—Å–∞', description: '+15% –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—è–º', bonus: 0.15 },
    10: { type: 'title', name: '–ú–∞—Å—Ç–µ—Ä –ë–∞–ª–∞–Ω—Å–∞', description: '–ì–∞—Ä–º–æ–Ω–∏—è —Ç–µ–ª–∞ –∏ —Ä–∞–∑—É–º–∞' },
    15: { type: 'ability', name: '–¶–µ–ø–Ω–∞—è –†–µ–∞–∫—Ü–∏—è', description: '+50% XP –∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã', bonus: 0.5 },
    20: { type: 'title', name: '–õ–µ–≥–µ–Ω–¥–∞ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏', description: '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö' }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥
function checkLevelRewards() {
    const currentLevel = gameData.experience.level;
    
    if (rewards[currentLevel] && !gameData.unlockedRewards) {
        gameData.unlockedRewards = [];
    }
    
    if (rewards[currentLevel] && !gameData.unloc
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä–∞–¥
function checkLevelRewards(level) {
    const reward = rewards[level];
    if (reward) {
        setTimeout(() => {
            showRewardNotification(reward);
        }, 1000);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É
function showRewardNotification(reward) {
    const icons = { title: 'üëë', equipment: '‚öîÔ∏è', ability: '‚ú®' };
    const message = `${icons[reward.type]} –ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞!\n\n"${reward.name}"\n${reward.description}`;
    
    alert(message);
}

// –ù–∞–≥—Ä–∞–¥—ã
const rewards = {
    2: { type: 'title', name: '–£—á–µ–Ω–∏–∫ –¶–µ–ª–∏—Ç–µ–ª—è', description: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É' },
    3: { type: 'equipment', name: '–ú–∞–Ω—Ç–∏—è –ú—É–¥—Ä–æ—Å—Ç–∏', description: '+10% XP –∫–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º' },
    5: { type: 'title', name: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –ó–Ω–∞–Ω–∏–π', description: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å –º—É–¥—Ä–æ—Å—Ç–∏ –≤–µ–∫–æ–≤' },
    7: { type: 'equipment', name: '–ö–æ–ª—å—Ü–æ –§–æ–∫—É—Å–∞', description: '+15% –∫ –º–Ω–æ–∂–∏—Ç–µ–ª—è–º' },
    10: { type: 'title', name: '–ú–∞—Å—Ç–µ—Ä –ë–∞–ª–∞–Ω—Å–∞', description: '–ì–∞—Ä–º–æ–Ω–∏—è —Ç–µ–ª–∞ –∏ —Ä–∞–∑—É–º–∞' },
    15: { type: 'ability', name: '–¶–µ–ø–Ω–∞—è –†–µ–∞–∫—Ü–∏—è', description: '+50% XP –∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã' },
    20: { type: 'title', name: '–õ–µ–≥–µ–Ω–¥–∞ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏', description: '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö' }
};
