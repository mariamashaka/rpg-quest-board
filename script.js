// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let gameData = {
    stats: {
        energy: 50,
        focus: 50,
        health: 50
    },
    experience: {
        totalXP: 0,
        level: 1,
        categories: {
            medical: { xp: 0, level: 1 },
            science: { xp: 0, level: 1 },
            languages: { xp: 0, level: 1 },
            management: { xp: 0, level: 1 },
            family: { xp: 0, level: 1 },
            self: { xp: 0, level: 1 }
        }
    },
    health: {
        food: false,
        healthyFood: false,
        pleasureFood: false,
        exercise: false,
        sleep: false,
        water: 0
    },
    routine: {
        nesuda1: { text: '–ù–∞–ø–∏—Å–∞—Ç—å —Å–º–µ–Ω—ã —Å–ø–µ—Ü–æ–≤', done: false },
        nesuda2: { text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á–µ—Ç—ã', done: false },
        nesuda3: { text: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏', done: false },
        home: { text: '–†–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ—á—Ç—É', done: false },
        family: { text: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º', done: false }
    },
    quests: [],
    questIdCounter: 1,
    lastResetDate: new Date().toDateString(),
    equipment: [],
    titles: []
};

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–æ–≤
const categories = {
    medical: 'ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è',
    science: 'üî¨ –ù–∞—É–∫–∞',
    languages: 'üåç –Ø–∑—ã–∫–∏',
    management: 'üèõÔ∏è –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
    family: 'üë®‚Äçüë©‚Äçüëß –°–µ–º—å—è',
    self: '‚ú® –Ø —Å–∞–º–∞'
};

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è)
function getXPForLevel(level) {
    if (level <= 1) return 0;
    let totalXP = 0;
    for (let i = 2; i <= level; i++) {
        totalXP += 50 * i; // 100, 150, 200, 250...
    }
    return totalXP;
}

function getLevelFromXP(xp) {
    let level = 1;
    let requiredXP = 0;
    while (requiredXP <= xp) {
        level++;
        requiredXP = getXPForLevel(level);
    }
    return level - 1;
}
// –†–∞—Å—á–µ—Ç XP –∑–∞ –∫–≤–µ—Å—Ç—ã
function calculateQuestXP(level, progress = 100) {
    const baseXP = {
        'E': 20,   // –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
        'D': 80,   // –ù–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
        'C': 200,  // –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–ª–∏
        'B': 400,  // –í–∞–∂–Ω—ã–µ –º–∏—Å—Å–∏–∏
        'A': 1000, // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        'S': 5000  // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    };
    return Math.round((baseXP[level] || 80) * (progress / 100));
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
function addExperience(category, xp) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –∑–¥–æ—Ä–æ–≤—å—è
    const healthBonus = calculateHealthBonus();
    const routineBonus = calculateRoutineBonus();
    const finalXP = Math.round(xp * healthBonus * routineBonus);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    gameData.experience.categories[category].xp += finalXP;
    gameData.experience.totalXP += finalXP;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryData = gameData.experience.categories[category];
    const newCategoryLevel = getLevelFromXP(categoryData.xp);
    
    if (newCategoryLevel > categoryData.level) {
        categoryData.level = newCategoryLevel;
        showLevelUpNotification(`${categories[category]} –¥–æ—Å—Ç–∏–≥ ${newCategoryLevel} —É—Ä–æ–≤–Ω—è!`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    const newMainLevel = getLevelFromXP(gameData.experience.totalXP);
    
    if (newMainLevel > gameData.experience.level) {
        gameData.experience.level = newMainLevel;
        showLevelUpNotification(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${newMainLevel} —É—Ä–æ–≤–Ω—è!`);
        giveReward(newMainLevel);
    }
    
    updateExperienceDisplay();
    saveGameData();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ XP
    showMiniNotification(`+${finalXP} XP –≤ "${categories[category]}"`);
}

// –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ –æ—Ç –∑–¥–æ—Ä–æ–≤—å—è
function calculateHealthBonus() {
    let bonus = 1.0;
    
    if (gameData.stats.energy >= 80) bonus += 0.3;
    else if (gameData.stats.energy >= 60) bonus += 0.2;
    else if (gameData.stats.energy >= 40) bonus += 0.1;
    
    if (gameData.stats.focus >= 80) bonus += 0.2;
    else if (gameData.stats.focus >= 60) bonus += 0.1;
    
    if (gameData.stats.health >= 80) bonus += 0.2;
    else if (gameData.stats.health >= 60) bonus += 0.1;
    
    return bonus;
}

// –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ –æ—Ç —Ä—É—Ç–∏–Ω—ã
function calculateRoutineBonus() {
    const routineCompletion = calculateRoutineCompletion();
    
    if (routineCompletion >= 80) return 1.5;      // +50%
    else if (routineCompletion >= 60) return 1.3; // +30%
    else if (routineCompletion >= 40) return 1.2; // +20%
    else if (routineCompletion >= 20) return 1.1; // +10%
    
    return 1.0;
}

function calculateRoutineCompletion() {
    const routine = gameData.routine;
    let completed = 0;
    let total = Object.keys(routine).length;
    
    Object.values(routine).forEach(task => {
        if (task.done) completed++;
    });
    
    return (completed / total) * 100;
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–¥–æ—Ä–æ–≤—å—è
function updateStatsFromHealth() {
    const health = gameData.health;
    let baseEnergy = 30;
    let baseFocus = 30;
    let baseHealth = 30;
    
    // –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è –¥–∞–µ—Ç +10-15 –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
    if (health.food) {
        baseEnergy += 10;
        baseFocus += 5;
        baseHealth += 10;
    }
    
    if (health.healthyFood) {
        baseEnergy += 15;
        baseFocus += 10;
        baseHealth += 15;
    }
    
    if (health.pleasureFood) {
        baseEnergy += 5;
        baseFocus += 5;
        baseHealth += 5;
    }
    
    if (health.exercise) {
        baseEnergy += 20;
        baseFocus += 15;
        baseHealth += 15;
    }
    
    if (health.sleep) {
        baseEnergy += 25;
        baseFocus += 20;
        baseHealth += 10;
    }
    
    // –í–æ–¥–∞ –¥–∞–µ—Ç –±–æ–Ω—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if (health.water >= 2000) {
        baseEnergy += 15;
        baseFocus += 15;
        baseHealth += 10;
    } else if (health.water >= 1500) {
        baseEnergy += 10;
        baseFocus += 10;
        baseHealth += 5;
    } else if (health.water >= 1000) {
        baseEnergy += 5;
        baseFocus += 5;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –≤ 100
    gameData.stats.energy = Math.min(100, baseEnergy);
    gameData.stats.focus = Math.min(100, baseFocus);
    gameData.stats.health = Math.min(100, baseHealth);
    
    updateStatsDisplay();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–¥–æ—Ä–æ–≤—å—è
function updateHealthFromUI() {
    const oldHealth = { ...gameData.health };
    
    // –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤
    gameData.health.food = document.getElementById('food-check').checked;
    gameData.health.healthyFood = document.getElementById('healthy-food-check').checked;
    gameData.health.pleasureFood = document.getElementById('pleasure-food-check').checked;
    gameData.health.exercise = document.getElementById('exercise-check').checked;
    gameData.health.sleep = document.getElementById('sleep-check').checked;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–º–µ—á–µ–Ω–æ –≤–ø–µ—Ä–≤—ã–µ —Å–µ–≥–æ–¥–Ω—è
    const healthTasks = ['food', 'healthyFood', 'pleasureFood', 'exercise', 'sleep'];
    const healthNames = {
        food: 'üçΩÔ∏è –ï–¥–∞ (3 —Ä–∞–∑–∞)',
        healthyFood: 'ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
        pleasureFood: 'üç∞ –ü–∏—Ç–∞–Ω–∏–µ –≤ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ',
        exercise: 'üèÉ‚Äç‚ôÄÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        sleep: 'üò¥ –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–æ–Ω'
    };
    
    healthTasks.forEach(task => {
        if (!oldHealth[task] && gameData.health[task]) {
            addExperience('self', 2); // 2 XP –∑–∞ –∫–∞–∂–¥—É—é –≥–∞–ª–æ—á–∫—É –∑–¥–æ—Ä–æ–≤—å—è
            showMiniNotification(`+2 XP –∑–∞ "${healthNames[task]}"`);
        }
    });
    
    updateStatsFromHealth();
    updateMultiplierDisplay();
    saveGameData();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∞–π–¥–µ—Ä–∞ –≤–æ–¥—ã
function updateWaterFromUI() {
    const waterSlider = document.getElementById('water-slider');
    gameData.health.water = parseInt(waterSlider.value);
    document.getElementById('water-display').textContent = waterSlider.value;
    
    updateStatsFromHealth();
    updateMultiplierDisplay();
    saveGameData();
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
function updateRoutineFromUI() {
    const oldRoutine = {};
    Object.keys(gameData.routine).forEach(key => {
        oldRoutine[key] = gameData.routine[key].done;
    });
    
    // –°—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    Object.keys(gameData.routine).forEach(key => {
        const checkbox = document.getElementById(`${key}-check`);
        if (checkbox) {
            const wasCompleted = oldRoutine[key];
            const isCompleted = checkbox.checked;
            
            // –î–∞–µ–º XP –∑–∞ –Ω–æ–≤—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if (!wasCompleted && isCompleted) {
                giveRoutineXP(key);
            }
            
            gameData.routine[key].done = isCompleted;
        }
    });
    
    updateMultiplierDisplay();
    saveGameData();
}

// XP –∑–∞ —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
function giveRoutineXP(taskKey) {
    let baseXP = 3; // –ë–∞–∑–æ–≤—ã–µ 3 XP –∑–∞ —Ä—É—Ç–∏–Ω—É
    let category = 'self';
    
    // –†–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–π XP –∏ –≤ —Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (taskKey.includes('nesuda')) {
        category = 'management';
        baseXP = 4; // –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏ —á—É—Ç—å –±–æ–ª—å—à–µ
    } else if (taskKey === 'family') {
        category = 'family';
        baseXP = 3;
    } else if (taskKey === 'home') {
        category = 'self';
        baseXP = 2;
    }
    
    addExperience(category, baseXP);
    showMiniNotification(`+${baseXP} XP –∑–∞ "${gameData.routine[taskKey].text}"`);
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —Ä—É—Ç–∏–Ω—ã
function editRoutineTask(taskKey) {
    const currentText = gameData.routine[taskKey].text;
    const newText = prompt('–ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–¥–∞—á—É:', currentText);
    
    if (newText && newText.trim() !== '') {
        gameData.routine[taskKey].text = newText.trim();
        updateRoutineDisplay();
        saveGameData();
    }
}

// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —É—Ä–æ–≤–Ω–∏
function giveReward(level) {
    const rewards = {
        2: { type: 'title', name: '–£—á–µ–Ω–∏—Ü–∞ –¶–µ–ª–∏—Ç–µ–ª—è', description: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É' },
        3: { type: 'equipment', name: '–°—Ç–µ—Ç–æ—Å–∫–æ–ø –ú—É–¥—Ä–æ—Å—Ç–∏', description: '+10% XP –∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –∫–≤–µ—Å—Ç–∞–º' },
        5: { type: 'title', name: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –ó–Ω–∞–Ω–∏–π', description: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –º—É–¥—Ä–æ—Å—Ç–∏ –≤–µ–∫–æ–≤' },
        7: { type: 'equipment', name: '–ú–∞–Ω—Ç–∏—è –ë–∞–ª–∞–Ω—Å–∞', description: '+15% XP –∫–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º' },
        10: { type: 'title', name: '–ú–∞—Å—Ç–µ—Ä –ñ–∏–∑–Ω–∏', description: '–ì–∞—Ä–º–æ–Ω–∏—è —Ç–µ–ª–∞, —Ä–∞–∑—É–º–∞ –∏ –¥—É—à–∏' },
        12: { type: 'equipment', name: '–ö–æ–ª—å—Ü–æ –§–æ–∫—É—Å–∞', description: '+20% –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ –§–æ–∫—É—Å' },
        15: { type: 'title', name: '–õ–µ–≥–µ–Ω–¥–∞ –¢–∞–Ω–∑–∞–Ω–∏–∏', description: '–í–∞—à–∞ —Å–ª–∞–≤–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏–ª–∞—Å—å –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ' },
        20: { type: 'equipment', name: '–ö–æ—Ä–æ–Ω–∞ –¶–µ–ª–∏—Ç–µ–ª—å–Ω–∏—Ü—ã', description: '+25% XP –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º' }
    };
    
    const reward = rewards[level];
    if (reward) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if (reward.type === 'title') {
            gameData.titles.push(reward);
        } else if (reward.type === 'equipment') {
            gameData.equipment.push(reward);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ä–æ–≤–Ω–µ
        setTimeout(() => {
            const icons = { title: 'üëë', equipment: '‚öîÔ∏è', ability: '‚ú®' };
            alert(`${icons[reward.type]} –ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞!\n\n"${reward.name}"\n${reward.description}`);
        }, 1500);
        
        saveGameData();
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showLevelUpNotification(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed; top: 50%; left: 50%;
        transform: translate(-50%, -50%);
        background: linear-gradient(135deg, #d4af37, #ffd700);
        color: #1a0f0a; padding: 20px 30px; border-radius: 15px;
        font-family: 'Cinzel', serif; font-weight: bold; font-size: 1.2em;
        z-index: 2000; box-shadow: 0 10px 30px rgba(0,0,0,0.5);
        border: 2px solid #b8941f; animation: levelUp 3s ease-in-out forwards;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è
    const style = document.createElement('style');
    style.textContent = `
        @keyframes levelUp {
            0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
            20% { opacity: 1; transform: translate(-50%, -50%) scale(1.1); }
            80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
            100% { opacity: 0; transform: translate(-50%, -50%) scale(0.9); }
        }
    `;
    document.head.appendChild(style);
    
    setTimeout(() => {
        if (document.body.contains(notification)) document.body.removeChild(notification);
        if (document.head.contains(style)) document.head.removeChild(style);
    }, 3000);
}

function showMiniNotification(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed; top: 20px; right: 20px;
        background: rgba(212, 175, 55, 0.9); color: #1a0f0a;
        padding: 10px 15px; border-radius: 8px;
        font-size: 0.9em; font-weight: bold; z-index: 1500;
        animation: slideIn 0.5s ease-out;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (document.body.contains(notification)) {
            document.body.removeChild(notification);
        }
    }, 2500);
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—ã—Ç–∞
function updateExperienceDisplay() {
    const currentLevel = gameData.experience.level;
    const currentXP = gameData.experience.totalXP;
    const currentLevelXP = getXPForLevel(currentLevel);
    const nextLevelXP = getXPForLevel(currentLevel + 1);
    const progressXP = currentXP - currentLevelXP;
    const neededXP = nextLevelXP - currentLevelXP;
    
    document.getElementById('main-level').textContent = currentLevel;
    document.getElementById('total-xp').textContent = `${currentXP} XP`;
    
    const progressPercent = neededXP > 0 ? (progressXP / neededXP) * 100 : 0;
    document.getElementById('xp-bar-fill').style.width = progressPercent + '%';
    document.getElementById('xp-bar-text').textContent = `${progressXP} / ${neededXP} XP`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    Object.keys(gameData.experience.categories).forEach(category => {
        const level = gameData.experience.categories[category].level;
        const element = document.getElementById(`${category}-level`);
        if (element) {
            element.textContent = level;
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
function updateStatsDisplay() {
    document.getElementById('energy-fill').style.width = gameData.stats.energy + '%';
    document.getElementById('energy-value').textContent = gameData.stats.energy;
    
    document.getElementById('focus-fill').style.width = gameData.stats.focus + '%';
    document.getElementById('focus-value').textContent = gameData.stats.focus;
    
    document.getElementById('health-fill').style.width = gameData.stats.health + '%';
    document.getElementById('health-value').textContent = gameData.stats.health;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
function updateHealthDisplay() {
    document.getElementById('food-check').checked = gameData.health.food;
    document.getElementById('healthy-food-check').checked = gameData.health.healthyFood;
    document.getElementById('pleasure-food-check').checked = gameData.health.pleasureFood;
    document.getElementById('exercise-check').checked = gameData.health.exercise;
    document.getElementById('sleep-check').checked = gameData.health.sleep;
    document.getElementById('water-slider').value = gameData.health.water;
    document.getElementById('water-display').textContent = gameData.health.water;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Ç–∏–Ω—ã
function updateRoutineDisplay() {
    Object.keys(gameData.routine).forEach(key => {
        const checkbox = document.getElementById(`${key}-check`);
        const text = document.getElementById(`${key}-text`);
        
        if (checkbox && text) {
            checkbox.checked = gameData.routine[key].done;
            text.textContent = gameData.routine[key].text;
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
function updateMultiplierDisplay() {
    const healthBonus = calculateHealthBonus();
    const routineBonus = calculateRoutineBonus();
    const totalMultiplier = healthBonus * routineBonus;
    const routineCompletion = calculateRoutineCompletion();
    
    document.getElementById('multiplier-display').innerHTML = `
        <div>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞: √ó${totalMultiplier.toFixed(1)}</div>
        <div style="font-size: 0.8em; margin-top: 5px;">
            üí™ –ó–¥–æ—Ä–æ–≤—å–µ: √ó${healthBonus.toFixed(1)} | üìã –†—É—Ç–∏–Ω–∞: √ó${routineBonus.toFixed(1)}
        </div>
        <div style="font-size: 0.8em; color: #cdaa3d;">
            –†—É—Ç–∏–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ ${routineCompletion.toFixed(0)}%
        </div>
    `;
}

// –û–±—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
    updateStatsFromHealth();
    updateStatsDisplay();
    updateHealthDisplay();
    updateRoutineDisplay();
    updateExperienceDisplay();
    updateMultiplierDisplay();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function saveGameData() {
    try {
        localStorage.setItem('rpgQuestData', JSON.stringify(gameData));
    } catch (e) {
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    }
}

function loadGameData() {
    try {
        const saved = localStorage.getItem('rpgQuestData');
        if (saved) {
            const savedData = JSON.parse(saved);
            gameData = { ...gameData, ...savedData };
        }
    } catch (e) {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –¥–Ω—è
function checkDailyReset() {
    const today = new Date().toDateString();
    if (gameData.lastResetDate !== today) {
        // –°–±—Ä–æ—Å –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ä—É—Ç–∏–Ω—ã
        gameData.health = {
            food: false,
            healthyFood: false,
            pleasureFood: false,
            exercise: false,
            sleep: false,
            water: 0
        };
        
        Object.keys(gameData.routine).forEach(key => {
            gameData.routine[key].done = false;
        });
        
        gameData.lastResetDate = today;
        saveGameData();
    }
}
// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤
function renderQuests() {
    const grid = document.getElementById('quest-grid');
    grid.innerHTML = '';
    
    gameData.quests.forEach(quest => {
        const card = createQuestCard(quest);
        grid.appendChild(card);
    });
    
    if (gameData.quests.length === 0) {
        grid.innerHTML = '<p style="text-align: center; color: #cdaa3d; grid-column: 1/-1;">–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!</p>';
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–≤–µ—Å—Ç–∞
function createQuestCard(quest) {
    const card = document.createElement('div');
    card.className = 'quest-card';
    card.dataset.category = quest.category;
    
    const progressPercent = Math.round(quest.progress);
    const categoryName = categories[quest.category] || quest.category;
    
    let deadlineHtml = '';
    if (quest.deadline) {
        const deadlineText = formatDate(quest.deadline);
        const overdue = isOverdue(quest.deadline);
        deadlineHtml = `<div class="quest-deadline ${overdue ? 'overdue' : ''}">${deadlineText}</div>`;
    }
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    let progressHtml = `
        <div class="quest-progress">
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${progressPercent}%"></div>
                <div class="progress-text">${progressPercent}%</div>
            </div>
        </div>
    `;
    
    // –≠—Ç–∞–ø—ã –∫–≤–µ—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let stagesHtml = '';
    if (quest.stages && quest.stages.length > 0) {
        stagesHtml = '<div class="quest-stages">';
        quest.stages.forEach((stage, index) => {
            const completed = stage.completed ? 'completed' : '';
            stagesHtml += `
                <div class="stage-item ${completed}">
                    <input type="checkbox" class="stage-checkbox" 
                           ${stage.completed ? 'checked' : ''} 
                           onchange="toggleStage(${quest.id}, ${index})">
                    <span class="stage-name">${stage.name}</span>
                    <span class="stage-percent">${stage.percent}%</span>
                </div>
            `;
        });
        stagesHtml += '</div>';
    }
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    let controlsHtml = `
        <div class="quest-controls">
            <button class="btn btn-small" onclick="updateQuestProgress(${quest.id}, 10)">+10%</button>
            <button class="btn btn-small" onclick="updateQuestProgress(${quest.id}, 25)">+25%</button>
            <button class="btn btn-small" onclick="completeQuest(${quest.id})">‚úÖ</button>
            <button class="btn btn-small" onclick="deleteQuest(${quest.id})" style="background: #c44;">üóëÔ∏è</button>
        </div>
    `;
    
    card.innerHTML = `
        <div class="quest-level level-${quest.level}">${quest.level}</div>
        <div class="quest-title">${quest.title}</div>
        <div class="quest-category">${categoryName}</div>
        ${deadlineHtml}
        ${quest.description ? `<p style="color: #cdaa3d; font-size: 0.9em; margin-bottom: 15px;">${quest.description}</p>` : ''}
        ${progressHtml}
        ${stagesHtml}
        ${controlsHtml}
    `;
    
    return card;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–∞
function updateQuestProgress(questId, increment) {
    const quest = gameData.quests.find(q => q.id === questId);
    if (!quest) return;
    
    quest.progress = Math.min(100, quest.progress + increment);
    
    if (quest.progress >= 100) {
        completeQuest(questId);
    } else {
        renderQuests();
        saveGameData();
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –∫–≤–µ—Å—Ç–∞
function toggleStage(questId, stageIndex) {
    const quest = gameData.quests.find(q => q.id === questId);
    if (!quest || !quest.stages || !quest.stages[stageIndex]) return;
    
    const stage = quest.stages[stageIndex];
    stage.completed = !stage.completed;
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
    let totalProgress = 0;
    quest.stages.forEach(s => {
        if (s.completed) {
            totalProgress += s.percent;
        }
    });
    
    quest.progress = Math.min(100, totalProgress);
    
    if (quest.progress >= 100) {
        completeQuest(questId);
    } else {
        renderQuests();
        saveGameData();
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
function completeQuest(questId) {
    const questIndex = gameData.quests.findIndex(q => q.id === questId);
    if (questIndex === -1) return;
    
    const quest = gameData.quests[questIndex];
    let baseXP = calculateQuestXP(quest.level, 100);
    
    // –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É
    if (quest.deadline && isOverdue(quest.deadline)) {
        baseXP = Math.round(baseXP * 0.8); // -20% –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É
    }
    
    addExperience(quest.category, baseXP);
    
    const penalty = quest.deadline && isOverdue(quest.deadline) ? ' (-20% –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É)' : '';
    alert(`üéâ –ö–≤–µ—Å—Ç "${quest.title}" –∑–∞–≤–µ—Ä—à–µ–Ω!\n+${baseXP} XP –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categories[quest.category]}"${penalty}`);
    
    gameData.quests.splice(questIndex, 1);
    renderQuests();
    saveGameData();
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
function deleteQuest(questId) {
    if (!confirm('‚ùå –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç?\n\n–í—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å!')) return;
    
    const questIndex = gameData.quests.findIndex(q => q.id === questId);
    if (questIndex !== -1) {
        gameData.quests.splice(questIndex, 1);
        renderQuests();
        saveGameData();
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–æ–≤
function filterQuests(category) {
    document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    document.querySelectorAll('.quest-card').forEach(card => {
        if (category === 'all' || card.dataset.category === category) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}
// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞
function showAddQuestModal() {
    document.getElementById('addQuestModal').style.display = 'block';
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeAddQuestModal() {
    document.getElementById('addQuestModal').style.display = 'none';
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('quest-title').value = '';
    document.getElementById('quest-description').value = '';
    document.getElementById('quest-category').value = 'medical';
    document.getElementById('quest-level').value = 'E';
    document.getElementById('progress-type').value = 'simple';
    document.getElementById('quest-deadline').value = '';
    document.getElementById('initial-progress').value = '0';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    document.getElementById('steps-options').style.display = 'none';
    document.getElementById('stages-options').style.display = 'none';
    
    // –û—á–∏—â–∞–µ–º —ç—Ç–∞–ø—ã
    const stagesList = document.getElementById('stages-list');
    stagesList.innerHTML = `
        <div class="stage-item" style="display: flex; gap: 10px; margin-bottom: 10px; align-items: center;">
            <input type="text" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞..." style="flex: 1; padding: 8px; border: 1px solid #d4af37; border-radius: 5px; background: rgba(0,0,0,0.3); color: #d4af37;">
            <input type="number" placeholder="%" min="1" max="100" style="width: 60px; padding: 8px; border: 1px solid #d4af37; border-radius: 5px; background: rgba(0,0,0,0.3); color: #d4af37;">
            <button type="button" onclick="removeStage(this)" style="background: #c44; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer;">√ó</button>
        </div>
    `;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function toggleProgressOptions() {
    const progressType = document.getElementById('progress-type').value;
    const stepsOptions = document.getElementById('steps-options');
    const stagesOptions = document.getElementById('stages-options');
    
    stepsOptions.style.display = 'none';
    stagesOptions.style.display = 'none';
    
    if (progressType === 'steps') {
        stepsOptions.style.display = 'block';
    } else if (progressType === 'stages') {
        stagesOptions.style.display = 'block';
    }
}

// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø
function addStage() {
    const stagesList = document.getElementById('stages-list');
    const newStage = document.createElement('div');
    newStage.className = 'stage-item';
    newStage.style.cssText = 'display: flex; gap: 10px; margin-bottom: 10px; align-items: center;';
    newStage.innerHTML = `
        <input type="text" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞..." style="flex: 1; padding: 8px; border: 1px solid #d4af37; border-radius: 5px; background: rgba(0,0,0,0.3); color: #d4af37;">
        <input type="number" placeholder="%" min="1" max="100" style="width: 60px; padding: 8px; border: 1px solid #d4af37; border-radius: 5px; background: rgba(0,0,0,0.3); color: #d4af37;">
        <button type="button" onclick="removeStage(this)" style="background: #c44; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer;">√ó</button>
    `;
    stagesList.appendChild(newStage);
}

// –£–¥–∞–ª–∏—Ç—å —ç—Ç–∞–ø
function removeStage(button) {
    button.parentElement.remove();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
function addQuest() {
    const title = document.getElementById('quest-title').value.trim();
    const category = document.getElementById('quest-category').value;
    const level = document.getElementById('quest-level').value;
    const description = document.getElementById('quest-description').value.trim();
    const deadline = document.getElementById('quest-deadline').value;
    const initialProgress = parseInt(document.getElementById('initial-progress').value) || 0;
    const progressType = document.getElementById('progress-type').value;
    
    if (!title) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞!');
        return;
    }
    
    const newQuest = {
        id: gameData.questIdCounter++,
        title: title,
        category: category,
        level: level,
        description: description,
        progress: initialProgress,
        deadline: deadline || null,
        createdAt: new Date().toISOString(),
        progressType: progressType
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–∞–Ω–Ω—ã–µ
    if (progressType === 'steps') {
        const stepsFrom = parseInt(document.getElementById('steps-from').value) || 0;
        const stepsTo = parseInt(document.getElementById('steps-to').value) || 100;
        const stepsUnit = document.getElementById('steps-unit').value.trim() || '–µ–¥–∏–Ω–∏—Ü';
        
        newQuest.steps = {
            from: stepsFrom,
            to: stepsTo,
            current: stepsFrom,
            unit: stepsUnit
        };
    } else if (progressType === 'stages') {
        const stageInputs = document.querySelectorAll('#stages-list .stage-item');
        const stages = [];
        
        stageInputs.forEach(stageItem => {
            const nameInput = stageItem.querySelector('input[type="text"]');
            const percentInput = stageItem.querySelector('input[type="number"]');
            
            if (nameInput.value.trim() && percentInput.value) {
                stages.push({
                    name: nameInput.value.trim(),
                    percent: parseInt(percentInput.value),
                    completed: false
                });
            }
        });
        
        if (stages.length > 0) {
            newQuest.stages = stages;
        }
    }
    
    gameData.quests.push(newQuest);
    renderQuests();
    saveGameData();
    closeAddQuestModal();
    
    showMiniNotification(`–ö–≤–µ—Å—Ç "${title}" —Å–æ–∑–¥–∞–Ω!`);
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
function generateQuest() {
    const situation = document.getElementById('situation-input').value.trim();
    
    if (!situation) {
        alert('–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞!');
        return;
    }
    
    const questData = analyzeSituation(situation);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('quest-title').value = questData.title;
    document.getElementById('quest-category').value = questData.category;
    document.getElementById('quest-level').value = questData.level;
    document.getElementById('quest-description').value = questData.description;
    
    showAddQuestModal();
    document.getElementById('situation-input').value = '';
    
    showMiniNotification('–ö–≤–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–µ—Ç–∞–ª–∏.');
}

// –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞
function analyzeSituation(text) {
    text = text.toLowerCase();
    
    let category = 'self';
    let level = 'C';
    let title = '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ';
    let description = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–≤–µ—Å—Ç';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (text.includes('–¥—Ü–ø') || text.includes('—ç—Ä–≥–æ—Ç–µ—Ä–∞–ø–∏') || text.includes('–ø–∞—Ü–∏–µ–Ω—Ç') || 
        text.includes('–º–µ–¥–∏—Ü') || text.includes('–ª–µ—á–µ–Ω') || text.includes('–¥–∏–∞–≥–Ω–æ–∑')) {
        category = 'medical';
    } else if (text.includes('–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω') || text.includes('–ø—ã–ª—å—Ü') || 
               text.includes('–ª–æ–≤—É—à–∫') || text.includes('–Ω–∞—É–∫') || text.includes('–∞–Ω–∞–ª–∏–∑')) {
        category = 'science';
    } else if (text.includes('–∏—Å–ø–∞–Ω—Å–∫') || text.includes('–∞–Ω–≥–ª–∏–π—Å–∫') || 
               text.includes('—è–∑—ã–∫') || text.includes('ielts') || text.includes('–∏–∑—É—á–∞')) {
        category = 'languages';
    } else if (text.includes('–∫–ª–∏–Ω–∏–∫') || text.includes('—É–ø—Ä–∞–≤–ª–µ–Ω') || 
               text.includes('–∫–æ–º–∞–Ω–¥') || text.includes('–æ—Ç—á–µ—Ç') || text.includes('–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω')) {
        category = 'management';
    } else if (text.includes('—Å–µ–º—å') || text.includes('–¥–æ–º') || 
               text.includes('—Ä–µ–±–µ–Ω') || text.includes('—Ä–æ–¥–∏—Ç–µ–ª')) {
        category = 'family';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (text.includes('–Ω–∞—á–∞–ª') || text.includes('–ø–æ–ø—Ä–æ–±–æ–≤–∞') || text.includes('–∏–∑—É—á–∞')) {
        level = 'D';
    } else if (text.includes('–ø—Ä–æ–≤–µ—Å—Ç') || text.includes('—Å–¥–µ–ª–∞—Ç') || text.includes('–æ—Å–≤–æ–∏')) {
        level = 'C';
    } else if (text.includes('–≤–Ω–µ–¥—Ä–∏—Ç') || text.includes('—Å–∏—Å—Ç–µ–º–Ω–æ') || text.includes('–∏–∑–º–µ–Ω–∏—Ç')) {
        level = 'B';
    } else if (text.includes('—Å–æ–∑–¥–∞—Ç') || text.includes('—Ä–µ–≤–æ–ª—é—Ü') || text.includes('–∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ')) {
        level = 'A';
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    const words = text.split(' ').slice(0, 5).join(' ');
    title = words.charAt(0).toUpperCase() + words.slice(1);
    
    if (title.length > 50) {
        title = title.substring(0, 47) + '...';
    }
    
    description = `–ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ: "${text.slice(0, 150)}${text.length > 150 ? '...' : ''}"`;
    
    return { title, category, level, description };
}
// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
function formatDate(dateString) {
    if (!dateString) return '';
    
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = date.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) {
        return `‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ ${Math.abs(diffDays)} –¥–Ω.`;
    } else if (diffDays === 0) {
        return 'üî• –°–µ–≥–æ–¥–Ω—è!';
    } else if (diffDays === 1) {
        return '‚è∞ –ó–∞–≤—Ç—Ä–∞';
    } else if (diffDays <= 7) {
        return `üìÖ –ß–µ—Ä–µ–∑ ${diffDays} –¥–Ω.`;
    } else {
        return `üìÖ ${date.toLocaleDateString('ru-RU')}`;
    }
}

function isOverdue(dateString) {
    if (!dateString) return false;
    const date = new Date(dateString);
    const now = new Date();
    return date.getTime() < now.getTime();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
window.onclick = function(event) {
    const modal = document.getElementById('addQuestModal');
    if (event.target === modal) {
        closeAddQuestModal();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('load', function() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RPG Quest Board...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadGameData();
    checkDailyReset();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–≤–µ—Å—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (gameData.quests.length === 0) {
        gameData.quests = [
            {
                id: 1,
                title: '–ò–∑—É—á–µ–Ω–∏–µ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
                category: 'languages',
                level: 'C',
                description: '–î–æ—Å—Ç–∏—á—å —É—Ä–æ–≤–Ω—è B1 –≤ –∏—Å–ø–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –¢–∞–Ω–∑–∞–Ω–∏–∏',
                progress: 30,
                deadline: '2026-06-01',
                createdAt: new Date().toISOString(),
                progressType: 'simple'
            },
            {
                id: 2,
                title: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—ã–ª—å—Ü–µ–≤–æ–π –ª–æ–≤—É—à–∫–∏',
                category: 'science',
                level: 'B',
                description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—ã–ª—å—Ü–µ –≤ —Ä–µ–≥–∏–æ–Ω–µ',
                progress: 15,
                deadline: '2025-09-01',
                createdAt: new Date().toISOString(),
                progressType: 'simple'
            },
            {
                id: 3,
                title: '–û—Å–≤–æ–µ–Ω–∏–µ —ç—Ä–≥–æ—Ç–µ—Ä–∞–ø–∏–∏',
                category: 'medical',
                level: 'C',
                description: '–ò–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç—å–º–∏ —Å –î–¶–ü –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏',
                progress: 0,
                createdAt: new Date().toISOString(),
                progressType: 'stages',
                stages: [
                    { name: '–ò–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã', percent: 30, completed: false },
                    { name: '–ü—Ä–æ–π—Ç–∏ –æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å', percent: 40, completed: false },
                    { name: '–ü—Ä–∞–∫—Ç–∏–∫–∞ —Å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏', percent: 30, completed: false }
                ]
            }
        ];
        gameData.questIdCounter = 4;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateUI();
    renderQuests();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è
    const healthCheckboxes = [
        'food-check', 'healthy-food-check', 'pleasure-food-check', 
        'exercise-check', 'sleep-check'
    ];
    
    healthCheckboxes.forEach(id => {
        const checkbox = document.getElementById(id);
        if (checkbox) {
            checkbox.addEventListener('change', updateHealthFromUI);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–∞–π–¥–µ—Ä–∞ –≤–æ–¥—ã
    const waterSlider = document.getElementById('water-slider');
    if (waterSlider) {
        waterSlider.addEventListener('input', updateWaterFromUI);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä—É—Ç–∏–Ω—ã
    const routineCheckboxes = [
        'nesuda1-check', 'nesuda2-check', 'nesuda3-check', 
        'home-check', 'family-check'
    ];
    
    routineCheckboxes.forEach(id => {
        const checkbox = document.getElementById(id);
        if (checkbox) {
            checkbox.addEventListener('change', updateRoutineFromUI);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const progressTypeSelect = document.getElementById('progress-type');
    if (progressTypeSelect) {
        progressTypeSelect.addEventListener('change', toggleProgressOptions);
    }
    
    console.log('RPG Quest Board –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`–£—Ä–æ–≤–µ–Ω—å: ${gameData.experience.level}, XP: ${gameData.experience.totalXP}`);
    console.log(`–ö–≤–µ—Å—Ç–æ–≤: ${gameData.quests.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if (gameData.experience.totalXP === 0) {
        setTimeout(() => {
            alert('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RPG Quest Board!\n\n–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ —Å–≤–æ—é –∂–∏–∑–Ω—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É!\n\n‚ú® –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–≤–µ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ–ø—ã—Ç\nüí™ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∑–¥–æ—Ä–æ–≤—å–µ–º –¥–ª—è –±–æ–Ω—É—Å–æ–≤\nüìã –î–µ–ª–∞–π—Ç–µ —Ä—É—Ç–∏–Ω—É –¥–ª—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π XP\nüëë –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è');
        }, 1000);
    }
});

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    saveGameData();
}, 30000);

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    saveGameData();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
    console.error('–û—à–∏–±–∫–∞ –≤ RPG Quest Board:', e.error);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—à–∏–±–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
window.debugGameData = function() {
    console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:', gameData);
};

window.resetProgress = function() {
    if (confirm('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å!\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?')) {
        localStorage.removeItem('rpgQuestData');
        location.reload();
    }
};

window.addTestXP = function(amount = 100) {
    addExperience('self', amount);
    console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} XP –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
};

console.log('üéÆ RPG Quest Board –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:');
console.log('   debugGameData() - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
console.log('   resetProgress() - —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å');
console.log('   addTestXP(amount) - –¥–æ–±–∞–≤–∏—Ç—å XP –¥–ª—è —Ç–µ—Å—Ç–∞');